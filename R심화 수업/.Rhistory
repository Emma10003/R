print(Pclass_casualty)  # 3등석에서 가장 많은 사상자 발생.
# 4) 데이터 시각화
ggplot(data = Pclass_casualty, aes(x = Pclass, y = n))
# 4) 데이터 시각화
ggplot(data = Pclass_casualty, aes(x = Pclass, y = n)) + geom_col()
casualty <- titanic %>% filter(Survived == "No")
View(casualty)
Pclass_casualty <- casualty %>%
group_by(Pclass) %>%
summarize(class_casualty = n())
# 4) 데이터 시각화
ggplot(data = Pclass_casualty, aes(x = Pclass, y = class_casualty)) + geom_col()
Pclass_casualty_ratio <- casualty %>%
group_by(Pclass) %>%
summarize(casuatly_ratio = n()/Pclass)
Pclass_casualty_ratio <- casualty %>%
group_by(Pclass) %>%
summarize(casualty_ratio = casualty / Survived)
Pclass_casualty_ratio <- casualty %>%
group_by(Pclass) %>%
summarize(casualty_ratio = casualty / n(Survived))
Pclass_casualty_ratio <- Survived %>%
group_by(Pclass) %>%
summarize(total = n()
casualty_ratio = casualty / total)
print(Pclass_casualty_ratio)
Pclass_casualty_ratio <- Survived %>%
group_by(Pclass) %>%
summarize(total = n(),
casualty_ratio = casualty / total)
Pclass_casualty_ratio <- titanic$Survived %>%
group_by(Pclass) %>%
summarize(total = n(),
casualty_ratio = casualty / total)
# 객실 등급 별 사망자 비율
Survived_ratio <- titanic$Survived %>%
summarize(n = n(0))
# 객실 등급 별 사망자 비율
Survived_ratio <- titanic$Survived %>%
summarize(n = n())
# 객실 등급 별 사망자 비율
Pclass_casualty_ratio <- titanic %>%
group_by(Pclass) %>%
summarize(total = n(),
casulaty_sum = sum(Survived == "No", na.rm = T),
casualty_ratio = casualty_sum / total)
# 객실 등급 별 사망자 비율
Pclass_casualty_ratio <- titanic %>%
group_by(Pclass) %>%
summarize(total = n(),
casualty_ratio = casualty/ total)
casualty_num <- titanic %>% filter(Survived == "No") %>% summarize(n = n())
Pclass_casualty_ratio <- titanic %>%
group_by(Pclass) %>%
summarize(total = n(),
casualty_ratio = casualty_num/ total)
print(Pclass_casualty_ratio)
Pclass_casualty_ratio <- titanic %>%
group_by(Pclass) %>%
summarize(total = n(),
casualty = casualty_num,
casualty_ratio = casualty_num / total)
print(Pclass_casualty_ratio)
Pclass_casualty_ratio <- titanic %>%
group_by(Pclass) %>%
summarize(total = n(),
casualty = Pclass_casualty,
casualty_ratio = casualty_num / total)
Pclass_casualty <- titanic %>%
group_by(Pclass) %>%
summarize(total = n(),
casualty_sum = casualty_num
)
print(Pclass_casualty)
Pclass_casualty <- casualty %>%
group_by(Pclass) %>%
summarize(casualty_sum = n())
print(Pclass_casualty)  # 3등석에서 가장 많은 사상자 발생.
Pclass_casualty_ratio %>% left_join(Pclass_casualty, by =  Pclass)
Pclass_casualty_ratio %>% left_join(Pclass_casualty)
Pclass_casualty_ratio <- titanic %>%
group_by(Pclass) %>%
summarize(total = n(),
casualty_ratio = casualty_num / total)
print(Pclass_casualty_ratio)  # 각 객실 등급 전체 인원 대비 사망자 비율은 2등석이 가장 높음.
Pclass_casualty_ratio <- titanic %>%
group_by(Pclass) %>%
summarize(total = n(),
casualty_count = sum(Survived == "No", na.rm = TRUE),
casualty_ratio = casualty_count/ total)
print(Pclass_casualty_ratio)
ggplot(data = Pclass_casualty_ratio, aes(x = Pclass, y = class_casualty)) + geom_col()
# 4) 데이터 시각화
ggplot(data = Pclass_casualty, aes(x = Pclass, y = class_casualty)) + geom_col()
# 4) 데이터 시각화
ggplot(data = Pclass_casualty, aes(x = Pclass, y = class_casualty)) + geom_col()
# 4) 데이터 시각화
ggplot(data = Pclass_casualty, aes(x = Pclass, y = Pclass_casualty)) + geom_col()
ggplot(data = Pclass_casualty, aes(x = Pclass, y = Pclass_casualty)) + geom_col()
Pclass_casualty <- casualty %>%
group_by(Pclass) %>%
summarize(casualty_sum = n())
print(Pclass_casualty)
source("E:/명지대/4학년/1학기/4. 융합R통계분석 (6180)/2. 기말과제/기말고사 대체 과제_60200820 오유성.R", echo=TRUE)
install.packages("dplyr")
install.packages("ggplot2")
ggplot(data = Pclass_casualty, aes(x = Pclass, y = Pclass_casualty)) + geom_col()
print(Pclass_casualty)  # 3등석에서 가장 많은 사상자 발생.
# 4) 데이터 시각화
ggplot(data = Pclass_casualty, aes(x = Pclass, y = Pclass_casualty)) + geom_col()
# 4) 데이터 시각화
ggplot(data = Pclass_casualty, aes(x = Pclass, y = Pclass_casualty)) + geom_col()
# 4) 데이터 시각화
ggplot(data = Pclass_casualty, aes(x = Pclass, y = casualty_sum)) + geom_col()
ggplot(data = Pclass_casualty_ratio, aes(x = Pclass, y = casualty_ratio)) + geom_col()
# 패키지 설치
install.packages("dplyr")
install.packages("ggplot2")
library(dplyr)
library(ggplot2)
# 데이터 불러오기, 복사본 만들기
raw_titanic <- read.csv('titanic_data.csv')
titanic <- raw_titanic
# 데이터 검토
head(titanic)
str(titanic)
dim(titanic)  # 891행 12열
# 1. 객실 등급별 생존자 수 -----------------------------------------------------
# 1) 객실 등급 변수 전처리
# 변수 검토
class(titanic$Pclass) # Int
table(titanic$Pclass) # 1등석 216, 2등석 184, 3등석 491
#이상치 결측처리
titanic$Pclass <- ifelse(titanic$Pclass < 1 | titanic$Pclass > 3, NA, titanic$Pclass)
table(is.na(titanic$Pclass))  # 이상치, 결측치 없음.
# 객실 등급 이름 부여
titanic$Pclass <- ifelse(titanic$Pclass == 1, "1st", ifelse(titanic$Pclass == 2, "2nd", "3rd"))
table(titanic$Pclass)
qplot(titanic$Pclass) # 3등석이 압도적으로 많다.
# 2) 생존자 변수 전처리
# 변수 검토
class(titanic$Survived) # Imt
table(titanic$Survived) # 사망:549명, 생존:342명
# 이상치 결측처리
titanic$Survived <- ifelse(titanic$Survived != 0 & titanic$Survived != 1,
NA, titanic$Survived)
table(titanic$Survived) # 이상치, 결측치 없음.
# 생존 여부 이름 부여
titanic$Survived <- ifelse(titanic$Survived == 0, "No", "Yes")
table(titanic$Survived)
qplot(titanic$Survived) # 사망자 수가 조금 더 많다.
# 3) 객실 등급 별 사망자 수 집계
casualty <- titanic %>% filter(Survived == "No")
View(casualty)
# 객실 등급 별 사망자 수
Pclass_casualty <- casualty %>%
group_by(Pclass) %>%
summarize(casualty_sum = n())
print(Pclass_casualty)  # 3등석에서 가장 많은 사상자 발생.
# 객실 등급 별 사망자 비율
Pclass_casualty_ratio <- titanic %>%
group_by(Pclass) %>%
summarize(total = n(),        # 각 객실 등급 별 총 인원 수
casualty_count = sum(Survived == "No", na.rm = TRUE),     # 객실 등급 별 사망자 수
casualty_ratio = casualty_count/ total)     # 각 등급의 전체 객실 인원 대비 사망자 비율
print(Pclass_casualty_ratio)  # 각 객실 등급 전체 인원 대비 사망자 비율은 3등석이 가장 높음.
# 4) 데이터 시각화
# 사망자 수 시각화
ggplot(data = Pclass_casualty, aes(x = Pclass, y = casualty_sum)) + geom_col()
# 사망자 비율 시각화
ggplot(data = Pclass_casualty_ratio, aes(x = Pclass, y = casualty_ratio)) + geom_col()
Pclass_casualty <- Pclass_casualty %>%
mutate(level = ifelse(casualty_sum == max(casualty_sum), "highest", "normal"))
print(Pcalss_casualty)
print(Pclass_casualty)
ggplot(data = Pclass_casualty, aes(x = Pclass, y = casualty_sum, fill = level)) +
geom_bar(stat  = "identity") +
scale_fill_manual(values = c("highest" = "#FFA7A7", "normal" = "#D9E5FF"))
print(Pclass_casualty_ratio)  # 각 객실 등급 전체 인원 대비 사망자 비율은 3등석이 가장 높음.
# 사망자 비율 시각화---
# 비율(casualty_ratio)가 가장 높은 데이터를 다른 색으로 지정
Pclass_casualty_ratio <- Pclass_casualty_ratio %>%
mutate(level = ifelse(casualty_ratio == max(casualty_ratio), "highest", "normal"))
print(Pclass_casualty_ratio)
# 색상을 적용하여 시각화
ggplot(data = Pclass_casualty_ratio, aes(x = Pclass, y = casualty_ratio, fill = level)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("highest" = "#FFA7A7", "normal" = "#D9E5FF"))
View(Pclass_casualty)
View(Pclass_casualty_ratio
View(Pclass_casualty_ratio)
View(Pclass_casualty_ratio)
# 데이터 검토
head(titanic)
str(titanic)
# 데이터 검토
str(raw_titanic)
titanic$Pclass <- ifelse(titanic$Pclass < 1 | titanic$Pclass > 3, NA, titanic$Pclass)
table(is.na(titanic$Pclass))  # 이상치, 결측치 없음.
# 1. 객실 등급별 사망자 수 -----------------------------------------------------
# 1) 객실 등급 변수 전처리
# 변수 검토
class(titanic$Pclass) # Int
table(titanic$Pclass) # 1등실 216, 2등실 184, 3등실 491
raw_titanic <- read.csv('titanic_data.csv')
titanic <- raw_titanic
# 1. 객실 등급별 사망자 수 -----------------------------------------------------
# 1) 객실 등급 변수 전처리
# 변수 검토
class(titanic$Pclass) # Int
table(titanic$Pclass) # 1등실 216, 2등실 184, 3등실 491
#이상치 결측처리
titanic$Pclass <- ifelse(titanic$Pclass < 1 | titanic$Pclass > 3, NA, titanic$Pclass)
table(is.na(titanic$Pclass))  # 이상치, 결측치 없음.
# 객실 등급 이름 부여
titanic$Pclass <- ifelse(titanic$Pclass == 1, "1st", ifelse(titanic$Pclass == 2, "2nd", "3rd"))
table(titanic$Pclass)
qplot(titanic$Pclass) # 3등석이 압도적으로 많다.
# 변수 검토
class(titanic$Survived) # Imt
table(titanic$Survived) #
titanic$Survived <- ifelse(titanic$Survived != 0 & titanic$Survived != 1,
NA, titanic$Survived)
table(titanic$Survived) # 이상치, 결측치 없음.
titanic$Survived <- ifelse(titanic$Survived != 0 & titanic$Survived != 1,
NA, titanic$Survived)
table(titanic$Survived) # 이상치, 결측치 없음.
table(is.na(titanic$Survived)) # 이상치, 결측치 없음.
titanic$Survived <- ifelse(titanic$Survived == 0, "No", "Yes")
table(titanic$Survived)
qplot(titanic$Survived) # 사망자 수가 조금 더 많다.
# 3) 객실 등급 별 사망자 수 집계
casualty <- titanic %>% filter(Survived == "No")
View(casualty)
Pclass_casualty <- Pclass_casualty %>%
mutate(level = ifelse(casualty_sum == max(casualty_sum), "highest", "normal"))
print(Pclass_casualty)
ggplot(data = Pclass_casualty, aes(x = Pclass, y = casualty_sum, fill = level)) +
geom_bar(stat  = "identity") +
scale_fill_manual(values = c("highest" = "#FFA7A7", "normal" = "#D9E5FF"))
Pclass_casualty <- Pclass_casualty %>%
mutate(level = ifelse(casualty_sum == max(casualty_sum), "highest", "normal"))
print(Pclass_casualty)
# 색상을 적용하여 시각화
ggplot(data = Pclass_casualty, aes(x = Pclass, y = casualty_sum, fill = level)) +
geom_bar(stat  = "identity") +
scale_fill_manual(values = c("highest" = "#FFA7A7", "normal" = "#D9E5FF"))
Pclass_casualty_ratio <- Pclass_casualty_ratio %>%
mutate(level = ifelse(casualty_ratio == max(casualty_ratio), "highest", "normal"))
print(Pclass_casualty_ratio)
# 색상을 적용하여 시각화
ggplot(data = Pclass_casualty_ratio, aes(x = Pclass, y = casualty_ratio, fill = level)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("highest" = "#FFA7A7", "normal" = "#D9E5FF"))
MSE <- (value - predict_value) / len(value)
value <- c(3, -0.5, 2, 7)
predict_value <- c(2.5, 0.0, 2, 8)
MSE <- ((value - predict_value) / len(value))^2
MSE <- ((value - predict_value) / length(value))^2
MSE
MSE <- (sum(value - predict_value) / length(value))^2
MSE
MSE <- ((sum(value - predicted_value)) / length(value)) ^2
MSE <- ((sum(value - predict_value)) / length(value)) ^2
MSE
MSE <- (sum(value - predict_value))^2 / length(value)
MSE
MSE <-mean((value-predict_value)^2)
MSE
getwd
library(mlbench)
install.packages("mlbench")
library(mlbench)
data("BostonHousing")
head(BostonHousin)
head(BostonHousing)
# 회귀분석 lm
# lm(종속변수 ~ 독립변수1 + 독립변수2 + ...)
# 종속변수를 제외한 모든 칼럼을 독립변수로 사용할 경우
# lm(종속변수 ~ .)
lm(medv ~ .)
# 회귀분석 lm
# lm(종속변수 ~ 독립변수1 + 독립변수2 + ...)
# 종속변수를 제외한 모든 칼럼을 독립변수로 사용할 경우
# lm(종속변수 ~ .)
lm(medv ~ ., data=BostonHousing)
# 회귀분석 lm
# lm(종속변수 ~ 독립변수1 + 독립변수2 + ..., data=데이터셋)
# 종속변수를 제외한 모든 칼럼을 독립변수로 사용할 경우
# lm(종속변수 ~ .)
lm(medv ~ ., data=BostonHousing)
# 회귀분석 lm
# lm(종속변수 ~ 독립변수1 + 독립변수2 + ..., data=데이터셋)
# 종속변수를 제외한 모든 칼럼을 독립변수로 사용할 경우
# lm(종속변수 ~ .)
mode <- lm(medv ~ ., data=BostonHousing)
# 회귀분석 lm
# lm(종속변수 ~ 독립변수1 + 독립변수2 + ..., data=데이터셋)
# 종속변수를 제외한 모든 칼럼을 독립변수로 사용할 경우
# lm(종속변수 ~ .)
model <- lm(medv ~ ., data=BostonHousing)
model
library(car)
install.packages("car")
library(car)
vif(model)
# 다중공선성이 없는 변수들만 선택해서 다시 회귀분석
model2 <- lm(medv ~ crim+zn+chas+rm+age+ptration+b+lstat)
# 다중공선성이 없는 변수들만 선택해서 다시 회귀분석
model2 <- lm(medv ~ crim+zn+chas+rm+age+ptration+b+lstat, data=BostonHousing)
# 다중공선성이 없는 변수들만 선택해서 다시 회귀분석
model2 <- lm(medv ~ crim+zn+chas+rm+age+ptratio+b+lstat, data=BostonHousing)
model2
summary(model2)
lm(medv ~ chas+rm+ptratio+b+lstat, data=BostonHousing)
# p-value가 0.05 이상인 독립변수만 선택해서 다시 회귀분석
model3 <- lm(medv ~ chas+rm+ptratio+b+lstat, data=BostonHousing)
model3
library(leaps)
install.packages("leaps")
library(leaps)
# 변수 선택
# 단계적방법(stepwise selection)
step(model, direction = "both")
# 변수들을 반복적으로 넣었다가 빼보면서 AIC가 줄어들 때 해당 변수를 선택
regsubsets(medv~., data=BostonHousing)
summary(mal)
# 변수들을 반복적으로 넣었다가 빼보면서 AIC가 줄어들 때 해당 변수를 선택
# 2.
mal <- regsubsets(medv~., data=BostonHousing)
summary(mal)
# 결과 해석: *표시 되어 있는 변수만 사용하면 된다.
lm(medv ~ chas+nox+rm+dis+ptratio+lstat)
# 결과 해석: *표시 되어 있는 변수만 사용하면 된다.
# 선택된 변수들로 다시 회귀분석.
fmodel <- lm(medv ~ chas+nox+rm+dis+ptratio+lstat, data=BostonHousing)
fmodel
getwd()
setwd("E:\프로그래밍\R\R심화 수업")
setwd("E:/프로그래밍/R/R심화 수업")
library(mlbench)
data("BostonHousing")
head("BostonHousing")
model <- lm(medv~., BostonHousing)
model
car::vif(model)
library(car)
install.pakages("carData")
install.packages("carData")
install.packages("carData")
library(car)
head(cars)
m <- lm(dist ~ speed, data = cars)
m
# 회귀계수
coef(m)
# 적합된 값
fitted(m)
str(cars)
# 적합된 값
fitted(m)
# 잔차
residuals(m)
predict(m, newdata=data.frame(speed=5))
# 모델 평가
summary(m)
plot(cars$speed, residuals(m))
plot(cars$speed, residuals(m)) # 잔차 산점도
plot(m, which=2)
dwt(m)
# 완전모델
full <- lm(dist ~ speed, data=cars)
full
# 축소모델
reduced <- lm(dist ~ 1, data=cars)
reduced
anova(reduced, full)
(m <- lm(dist ~ speed, data=cars))
# 회귀계수 - 종속변수에 speed 변수가 미치는 영향(Coefficient)
coef(m)
# 회귀모형에 새로운 데이터를 넣어서 확인
predict(m, newdata=data.frame(speed=5))
# 회귀계수 - 종속변수에 speed 변수가 미치는 영향(Coefficient)
coef(m)
# 적합된 값 - 이거 뭐지?
fitted(m)
# 잔차 - 이건 또 뭐지지
residuals(m)
# 회귀모형에 새로운 데이터를 넣어서 확인
predict(m, newdata=data.frame(speed=5))
# 모델 평가
summary(m)
plot(cars$speed, residuals(m))   # 잔차 산점도
plot(cars$speed, residuals(m))   # 잔차 산점도
plot(m, which=2)   # 오차항의 정규정 검정(QQ도)
dwt(m)   # 오차항의 Durbin Watson 독립성 검정 {car}, d값이 1.5~2.5이면 독립
# 적합된 값 - 선형회귀 모델을 가지고 예측된 값.
fitted(m)
## 변수선택법 -----------------------------------------------------------------
library(mlbench)
library(leaps)
data("BostonHousing")
m <- lm(medv~., data=BostonHousing)
summary(m)
step(m, direction="both")  # 단계적방법
mal <- regsubsets(medv~., data=BostonHousing)
summary(mal)
# 변수의 개수를 n개만 가지고 사용하고 싶은 경우 위의 결과에서 '*' 표시된
# 변수를 사용하면 된다.
summary(mal)$bic
summary(mal)$adjr2
getwd()
data("Boston")
library(MASS)
data("Boston")
# poly(lstat, 2): 독립변수를 2차로 하여 polynomial regression을 하도록 함.
summary(poly_model)
poly_model <- lm(medv ~ poly(lstat, 2), data=Boston)
# poly(lstat, 2): 독립변수를 2차로 하여 polynomial regression을 하도록 함.
summary(poly_model)
head("Boston")
head(Boston)
plot(Boston$lstat, Boston$medv, xlab="LSTAT", ylab="MEDV",
pch=19, col="blue")   # nolint
b="LSTAT", ylab="MEDV",
plot(Boston$lstat, Boston$medv, xlab="LSTAT", ylab="MEDV",
pch=19, col="blue")   # nolint
points(Boston$lstat, fitted(ploy_model), col="red", pch=20)
points(Boston$lstat, fitted(poly_model), col="red", pch=20)
lines(sort(Boston$lstat), fitted(poly_model)[order(Boston$lstat)],
col="red", lwd=2)
# 선형회귀분석 하고 시각화, 검정하기 (단순회귀분석)
library(car)
head(cars)   # cars 데이터는 변수가 2개(컬럼 2개)
str(cars)
(m <- lm(dist ~ speed, data=cars))
# 생성한 객체를 ()로 묶어서 실행하면 실행 결과까지 보여줌.
# speed: 자동차 속도
# dist: 브레이크를 밟았을 때 생기는 흔적의 길이
# 회귀계수 - 종속변수에 speed 변수가 미치는 영향(Coefficient)
coef(m)
# Intercept: β₀(절편항)
# speed: β1
# 적합된 값 - 선형회귀 모델을 가지고 예측된 값.(y hat)
fitted(m)
# 잔차 - 실제값과 예측값의 차이 (y - y hat)
residuals(m)
# 회귀모형에 새로운 데이터를 넣어서 확인 (학습에 참여하지 않은 새로운 데이터)
predict(m, newdata=data.frame(speed=5))
# speed의 값이 5일 때, speed mark의 길이(dist)는 어느 정도인가 출력
# 결과: 2.082949 만큼 생긴다.
# 모델 평가
summary(m)
# Std. Error
# t-value(t통계량)
# p-value가 0.05보다 작은지 확인.(*표시 있는 걸 쓰면 된다.)
# 0.05보다 작으면 해당 변수가 통계적으로 유의미하다.
# Multiple R-squared: 0.65 -> m이라는 모형이 데이터의 65%를 설명한다.
# F-statistic(f통계량)
plot(cars$speed, residuals(m))   # 잔차 산점도
plot(m, which=2)   # 오차항의 정규정 검정(QQ도)
# 1~2 구간에 모형에서 크게 벗어난 데이터들이 존재.
#   => tuning 과정을 통해서 맞추는 과정이 필요하다.
dwt(m)   # 오차항의 Durbin Watson 독립성 검정 {car}
# D-W Statistic값이 1.5~2.5이면 잔차의 값이 독립
# 귀무가설: 잔차의 값이 독립이다. -> p-value가 0.05보다 커야 좋은 모델.
# 완전모델
full <- lm(dist ~ speed, data=cars)
# 축소모델 - 왜 독립변수가 1?
reduced <- lm(dist ~ 1, data=cars)
anova(reduced, full)   # H0: 두 모델간 차이가 없다.
## 변수선택법 -----------------------------------------------------------------
library(mlbench)
library(leaps)
data("BostonHousing")
m <- lm(medv~., data=BostonHousing)
summary(m)
step(m, direction="both")  # 단계적방법
# AIC=1585.76 이후로는 AIC가 증가해서 멈춘 것.
# medv ~ crim + zn + chas + nox + rm + dis + rad + tax + ptratio 를 사용.
step(m, direction="backward")  # 후진제거법
step(m, direction="forward")  # 전진선택법
mal <- regsubsets(medv~., data=BostonHousing)
summary(mal)
# 변수의 개수를 n개만 가지고 사용하고 싶은 경우 위의 결과에서 '*' 표시된
# 변수를 사용하면 된다.
summary(mal)$bic
summary(mal)$adjr2
library(rpart)
library(rpart.plot)
library(rpart.plot)
install.packages("rpart.plot")
library(rpart.plot)
model <- rpart(Species~., data=iris)
prp(model, type=4, extra=1)
predict(model, newdata=iris[101, , drop=F])
head(iris)
## C5.0 알고리즘 --------------------------------------------------------------
library(C50)
## C5.0 알고리즘 --------------------------------------------------------------
install.packages("C50")
library(C50)
model <- C5.0(Species~., data=iris)
plot(model)
predict(model, newdata = iris[61, , drop=F])
## QUEST 알고리즘 -------------------------------------------------------------
library(party)
## QUEST 알고리즘 -------------------------------------------------------------
install.packages("party")
library(party)
plot(model)
predict(model, newdata = iris[101, , drop=F])
